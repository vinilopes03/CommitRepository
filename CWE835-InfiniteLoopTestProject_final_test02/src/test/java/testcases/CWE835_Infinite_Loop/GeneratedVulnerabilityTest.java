package testcases.CWE835_Infinite_Loop;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

class CWE835_Infinite_Loop__while_true_01Test {

    @Test
    void testInfiniteLoopVulnerability() {
        CWE835_Infinite_Loop__while_true_01 instance = new CWE835_Infinite_Loop__while_true_01();
        
        // Use a separate thread to run the bad method and check for infinite loop
        Thread testThread = new Thread(() -> {
            try {
                instance.bad();
            } catch (Throwable t) {
                // If an exception is thrown, the test should fail
                fail("The bad method threw an exception: " + t.getMessage());
            }
        });

        testThread.start();

        try {
            // Wait for the thread to complete with a timeout
            testThread.join(1000); // 1 second timeout
        } catch (InterruptedException e) {
            fail("Test thread was interrupted");
        }

        // If the thread is still alive after the timeout, it indicates an infinite loop
        assertTrue(testThread.isAlive(), "The bad method did not result in an infinite loop");
        
        // Interrupt the thread to stop the infinite loop
        testThread.interrupt();
    }
}
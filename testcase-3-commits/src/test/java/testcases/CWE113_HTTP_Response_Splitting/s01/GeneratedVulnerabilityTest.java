package testcases.CWE113_HTTP_Response_Splitting.s01;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.*;

class CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_04Test {

    @Test
    void testBadMethodVulnerability() throws Throwable {
        // Mock the HttpServletRequest and HttpServletResponse
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        // Set up the environment variable
        String maliciousInput = "value\r\nSet-Cookie: sessionId=malicious";
        try {
            // Set the environment variable (note: this is not usually possible in Java, but we simulate it here)
            setEnv("ADD", maliciousInput);

            // Create an instance of the class to be tested
            CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_04 servlet =
                    new CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_04();

            // Call the bad method
            servlet.bad(request, response);

            // Verify that the response.addCookie method was called with a potentially malicious cookie
            verify(response).addCookie(argThat(cookie -> cookie.getValue().contains("\r\n")));

            // If the above verification passes, it means the vulnerability is present
            assertTrue(true, "The method is vulnerable to HTTP Response Splitting.");
        } finally {
            // Clean up the environment variable
            setEnv("ADD", null);
        }
    }

    // Helper method to set environment variables (simulated for testing purposes)
    private static void setEnv(String key, String value) {
        try {
            java.util.Map<String, String> env = System.getenv();
            java.lang.reflect.Field field = env.getClass().getDeclaredField("m");
            field.setAccessible(true);
            java.util.Map<String, String> writableEnv = (java.util.Map<String, String>) field.get(env);
            if (value == null) {
                writableEnv.remove(key);
            } else {
                writableEnv.put(key, value);
            }
        } catch (Exception e) {
            throw new RuntimeException("Failed to set environment variable", e);
        }
    }
}
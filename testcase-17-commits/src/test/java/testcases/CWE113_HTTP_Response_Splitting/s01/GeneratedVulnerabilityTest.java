package testcases.CWE113_HTTP_Response_Splitting.s01;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_31Test {

    @Test
    void testBad() throws Throwable {
        // Set up the environment variable to a malicious value
        String maliciousValue = "en\r\nSet-Cookie: sessionId=malicious";
        System.setProperty("ADD", maliciousValue);

        // Mock HttpServletRequest and HttpServletResponse
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        // Create an instance of the class under test
        CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_31 servlet =
                new CWE113_HTTP_Response_Splitting__Environment_addCookieServlet_31();

        // Call the bad method
        servlet.bad(request, response);

        // Verify that a cookie was added with the malicious value
        verify(response).addCookie(argThat(cookie -> cookie.getValue().equals(maliciousValue)));
    }
}